define ("tui/widget/DatePicker", ["dojo", 
								  "dojo/text!tui/widget/datepicker/templates/datepicker.html",
								  "dijit/registry",
								  "dojox/dtl",
                                  "dojox/dtl/Context",
                                  "dojox/dtl/tag/logic",
                                  "dojox/dtl/filter/strings",
                                  "dojo/date/locale",
                                  "tui/widget/mixins/FloatPosition",
								  "tui/widget/_TuiBaseWidget", 
								  "tui/widget/datepicker/DateSelectOption"], function(dojo, datePickerTmpl, registry){
	
	dojo.declare("tui.widget.DatePicker", [tui.widget._TuiBaseWidget, tui.widget.mixins.FloatPosition], {
		
		// ---------------------------------------------------------------- datePicker properties
		
		// array for months text.
		months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
		
		// array for day of the week text
		days: ["M", "T", "W", "T", "F", "S", "S"],
		
		totalDays: null,
		
		dates:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],
		
		/*datepickerHTML: null,*/
		
		datepickerDOM: null,
		
		day: null,
		
		monthTxt: null,
		
		month: 0,
		
		year: null,
		
		years: null,
		 
		yearRange: 10,
				
		now: null,
		
		selectedDate: null,
		
		datePattern: "d MMMM yyyy",
		
		closeOnSelection: true,
		
		daycells: null,
		
		datePickerConnects: null,
		
		datePickerPlaceholder: null,
		
		posOffset: {top: 8, left: 0},
		
		tmpl: null,
		
		datePickerShowDate: null,

        templateview: "datepicker",

		// ---------------------------------------------------------------- datePicker methods
			
		postMixInProperties: function(){
			var datePicker  = this;
            datePicker.dateSelectOption = [];
			datePicker.now = new Date();
		},
		
		setup: function(newdate){
			var datePicker = this;
			datePicker.datePickerShowDate = newdate || new Date((datePicker.selectedDate.getMonth() + 1) +' 1 ,'+ datePicker.selectedDate.getFullYear());
			datePicker.totalDays = [31, datePicker.isLeapYear(datePicker.datePickerShowDate.getFullYear()) ? 29 : 28 , 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
			datePicker.day = (datePicker.datePickerShowDate.getDay() === 0) ? 7 : datePicker.datePickerShowDate.getDay();
			datePicker.monthTxt = datePicker.months[datePicker.datePickerShowDate.getMonth()];
			datePicker.month = datePicker.datePickerShowDate.getMonth();
			datePicker.year  = datePicker.datePickerShowDate.getFullYear();
			datePicker.years = []; 
			for (var i = 0; i < datePicker.yearRange; i++){
				datePicker.years[i] = datePicker.now.getFullYear() + i;
			}
			datePicker.predates = dojo.clone(datePicker.dates);
			datePicker.predates.splice((datePicker.day - 1), 31 - (datePicker.day - 1));			
			datePicker.monthdayamount = datePicker.totalDays[datePicker.datePickerShowDate.getMonth()];
			datePicker.monthdates = [];
			datePicker.tmpl = datePickerTmpl;
			var newrow = datePicker.day;
			for (var i = 0; i < datePicker.monthdayamount; i++){
				var monthdates = {
					date: i + 1,
					newrow: false
				}
 				if (newrow > 6){
					newrow = 0;
					monthdates.newrow = true;
				}
				datePicker.monthdates.push(monthdates);
				newrow++;
 			}
 			datePicker.datePickerShowDate.setDate(datePicker.monthdayamount);
 			var endDate = (datePicker.datePickerShowDate.getDay() === 0) ? datePicker.datePickerShowDate.getDay() : 7 - datePicker.datePickerShowDate.getDay();
 			datePicker.enddates = dojo.clone(datePicker.dates);
 			datePicker.enddates.splice(endDate, 31 - endDate);
 			datePicker.datePickerShowDate.setDate(1);
		},
		
		getSelectedDate: function(){
			var datePicker = this;
			return datePicker.selectedDate;
		},
				
		isLeapYear: function(year){
			return ((year % 100 != 0) && (year % 4 == 0) || (year % 400 == 0));
 		},
 		
 		disableDatesByIndex: function(index){
			// summary:
  			// 	 Disables datepicker date based on the given index number. 
			var datePicker = this;
			var disableIndex = index || 0;
			for(var i = 0; i < datePicker.daycells.length; i++) {
				if((i + 1) > disableIndex) {
					datePicker.setClassOnDate(i, "disabled", false);
				}
			}
		},
 		
		disablePastDatesByIndex: function(index){
			var datePicker = this;
			var disableIndex = index || 0;
			for(var i = 0; i < datePicker.daycells.length; i++) {
				if((i + 1) < disableIndex) {
					datePicker.setClassOnDate(i, "disabled", false);
				}
			}
		},
		
		disableUnavailableDates: function(date, past) {
			// summary:
  			// 		Determines if datepicker needs to be disabled, from the given seasonEndDate value.
  			//		We check to see if seasonEndDate is greater than the current datePickerShowDate.
			var datePicker = this;
			if (datePicker.datePickerShowDate.getMonth() == date.getMonth() && 
				datePicker.datePickerShowDate.getFullYear() == date.getFullYear()){
				var index = date.getDate();
				if (!past){
					datePicker.disableDatesByIndex(index);
				} else{
					datePicker.disablePastDatesByIndex(index);
				}
			} else if (!past && datePicker.datePickerShowDate > date){
				datePicker.disableDatesByIndex();
			} else if (past && datePicker.datePickerShowDate < date){
				datePicker.disableDatesByIndex();
			}
		},
 		
 		postCreate: function(){
 			var datePicker = this;
 			datePicker.datePickerPlaceholder = datePicker.domNode.placeholder;
 			dojo.attr(datePicker.domNode, "readonly", "readonly");
 			datePicker.selectedDate = dojo.date.locale.parse(datePicker.domNode.value, 
 										{selector: "date", datePattern: datePicker.datePattern}) || dojo.clone(datePicker.now);
 			datePicker.datePickerConnects = [];			
 			datePicker.setup();
            datePicker.subscribetotopic();

 			datePicker.connect(datePicker.domNode, "onfocus", function(event){
 				//dojo.stopEvent(event);
 				if (!datePicker.datepickerDOM){
 					datePicker.renderDatePicker();
 				}
 				datePicker.domNode.placeholder = "";
 				if (datePicker.domNode.value !== ""){
 					var showDate = dojo.date.locale.parse(datePicker.domNode.value, {selector: "date", datePattern: datePicker.datePattern});
 					showDate.setDate(1);
 					if (datePicker.datePickerShowDate.getTime() != showDate.getTime()){
 						datePicker.datePickerShowDate = showDate;
                        datePicker.setDateSelectOption();
                         //datePicker.redrawDatePicker();
 					}
 				}
 				datePicker.open();
			})

            datePicker.connect(document.body, "onclick", function(event){
                 //dojo.stopEvent(event);
                 if (document.activeElement === datePicker.domNode) return;
                 if (!datePicker.datepickerDOM ||
                     !datePicker.isShowing(datePicker.datepickerDOM)) return;
                 datePicker.close();
            })



			datePicker.connect(datePicker.domNode, "onblur", function(event){
				var datePicker = this;
 				dojo.stopEvent(event);
 				datePicker.datePickerTimer = setTimeout(function(){
					clearTimeout(datePicker.datePickerTimer);
					datePicker.close();
				}, 300);
			});
 		},

        subscribetotopic: function(){
            var datePicker = this;

            dojo.subscribe("tui/widget/datepicker/DateSelectOption/onclick", function(dateSelectOption){
                datePicker.clearDatPickerTimer();
            });

            dojo.subscribe("tui/widget/datepicker/DateSelectOption/onchange", function(selectoption, select, newdata){
                if (dojo.query(select).parents(".calendar")[0] === datePicker.datepickerDOM){
                    var option = (dojo.hasClass(select, "month")) ? "setMonth" : "setFullYear";
                    datePicker.datePickerShowDate[option](newdata.value);
                    datePicker.redrawDatePicker();
                }
            })
        },

 		open: function(){
 			var datePicker = this;
            dojo.publish("tui/widget/DatePicker/open", [datePicker]);
 			datePicker.posElement(datePicker.datepickerDOM);
 			datePicker.showWidget(datePicker.datepickerDOM);
 			datePicker._resizeConnect = datePicker.connect(window, "onresize", function(){
				datePicker.resize();
			})
 		},
 		
 		resize: function(){
			var datePicker = this;
			datePicker.posElement(datePicker.datepickerDOM);
		},
 		
 		close: function(){
 			var datePicker = this;
            dojo.publish("tui/widget/DatePicker/close", [datePicker]);
 			datePicker.disconnect(datePicker._resizeConnect);
 			datePicker.domNode.placeholder = datePicker.datePickerPlaceholder;
 			datePicker.hideWidget(datePicker.datepickerDOM);
 		},
 		
 		setClassOnDate: function(index, classname, remove){
 			var datePicker = this;
 			remove = (remove === undefined) ? true : remove;
 			if (remove){
 				dojo.query([".", classname].join(""), datePicker.datepickerDOM).removeClass(classname);
 			}
 			dojo.addClass(datePicker.daycells[index], classname);
 		},
 	
 		renderDatePicker: function(){
 			var datePicker = this;
 			datePicker.onBeforeRender();

            var template = new dojox.dtl.Template(datePicker.tmpl);
 			var context  = new dojox.dtl.Context(datePicker);
 			var datepickerHTML = template.render(context);

            if (datePicker.templateview === "datepicker"){
 			    datePicker.datepickerDOM = dojo.place(dojo.trim(datepickerHTML), document.body);
                dojo.parser.parse(datePicker.datepickerDOM);
            } else {
                dojo.place(dojo.trim(datepickerHTML),datePicker.datepickerDOM);
            }

 			datePicker.addDatePickerEventListener();
 		
 			if (datePicker.datePickerShowDate.getMonth() === datePicker.now.getMonth() && 
 				datePicker.datePickerShowDate.getFullYear() === datePicker.now.getFullYear()){
 				var index = datePicker.now.getDate();
 				datePicker.setClassOnDate(index - 1, "today");
 			}
 			
 			if (datePicker.datePickerShowDate.getMonth() === datePicker.selectedDate.getMonth() && 
 				datePicker.datePickerShowDate.getFullYear() === datePicker.selectedDate.getFullYear()){
 				var index = datePicker.selectedDate.getDate();
 				datePicker.setClassOnDate(index - 1, "selected");
 			}

            datePicker.onAfterRender();
 		},
 		
 		addDatePickerEventListener: function(){
 			var datePicker = this;
 			datePicker.daycells = dojo.query(".datepicker-day", datePicker.datepickerDOM); 			
 			datePicker.daycells.forEach(function(element, index){
				datePicker.datePickerConnects.push(dojo.connect(element, "onclick", function(event){
					dojo.stopEvent(event);
					var cell = this;
					if (dojo.hasClass(cell, "disabled")) return;
					dojo.query("a", element)[0].focus();
					datePicker.setClassOnDate(index, "selected");
					datePicker.selectedDate.setDate(index + 1);
					datePicker.selectedDate.setMonth(datePicker.month);
					datePicker.selectedDate.setFullYear(datePicker.year);
					datePicker.domNode.value = dojo.date.locale.format(datePicker.selectedDate, {selector: "date", datePattern: datePicker.datePattern })
					if (datePicker.closeOnSelection){
						datePicker.close();
					}
					datePicker.onSelectedDate(datePicker.selectedDate);
				}))
			})

            if (datePicker.templateview === "datepicker"){

                datePicker.connect(datePicker.datepickerDOM, "onclick", function(event){
                    dojo.stopEvent(event);
                })

                var leftArrow = dojo.query(".prev", datePicker.datepickerDOM)[0];
                datePicker.connect(leftArrow, "onclick", function(event){
				    dojo.stopEvent(event);
				    datePicker.clearDatPickerTimer();
				    datePicker.datePickerShowDate.setMonth(datePicker.datePickerShowDate.getMonth() - 1);
				    datePicker.setDateSelectOption();
			    })

			    var rightArrow = dojo.query(".next", datePicker.datepickerDOM)[0];
		        datePicker.connect(rightArrow, "onclick", function(event){
				    dojo.stopEvent(event);
				    datePicker.clearDatPickerTimer();
				    datePicker.datePickerShowDate.setMonth(datePicker.datePickerShowDate.getMonth() + 1);
                    datePicker.setDateSelectOption();
			    })
            }
 		},

        setDateSelectOption: function(){
            var datePicker = this;
            datePicker.dateSelectOption[0].setSelectedValue(datePicker.datePickerShowDate.getMonth());
            datePicker.dateSelectOption[1].setSelectedValue(datePicker.datePickerShowDate.getFullYear());
        },
 		
 		clearDatPickerTimer: function(){
 			var datePicker = this;
 			clearTimeout(datePicker.datePickerTimer);
 			datePicker.datePickerTimer = null;
 		},
 		
 		redrawDatePicker: function(){
 			var datePicker = this;
            datePicker.templateview = "datepickercells";
			datePicker.deleteDatePicker();
			datePicker.setup(datePicker.datePickerShowDate);
			datePicker.renderDatePicker();
			//datePicker.open();
 		},
 		
 		deleteDatePicker: function(){
 			var datePicker = this;
 			for (var i = 0; i < datePicker.datePickerConnects; i++){
				dojo.disconnect(datePicker.datePickerConnects[i]);
 			}
 			datePicker.datePickerConnects.length = 0;
 			datePicker.daycells.length = 0;
 			//datePicker.datepickerHTML = null;
 			dojo.query(".datepickertable", datePicker.datepickerDOM).remove();
 			//datePicker.datepickerDOM = null;
 		},
 		
 		onBeforeRender: function(){},
 		
 		onAfterRender: function(){
 			var datePicker = this;
 			datePicker.disableUnavailableDates(datePicker.now, true);
            if (datePicker.templateview === "datepicker"){
                var customDropDown = dojo.query(".custom-dropdown", datePicker.datepickerDOM);
                customDropDown.forEach(function(element, index){
                    var selectWidget = registry.getEnclosingWidget(element);
                    datePicker.dateSelectOption[index] = selectWidget;
                })
            }
 		},
 		
 		onSelectedDate: function(date){}
	})
	
	return tui.widget.DatePicker;
})